#version 330

layout (location = 0) in uvec3 vertex_position;
layout (location = 1) in vec2 vertex_uv;
layout (location = 2) in vec3 vertex_normal;

layout (location = 3) in uint instance;

uniform mat4 mvp_matrix;
uniform mat4 shadow_mvp_matrix;

uniform vec4 light_direction;
uniform vec4 light_rgba;
uniform vec4 ambient_color;

uniform float begin_blend_in_distance;
uniform float end_blend_in_distance;
uniform vec3 camera_xyz;

uniform mat4 transforms [6];

out vec2 f_uv;
out vec4 f_light_rgba;
out vec4 f_shadow_xyz;
flat out vec3 f_normal_model;

void main ()
{
    // vertex transform

    vec3 instance_translation = vec3 (
            float((instance >> 0u) & 127u) - 32.0, 
            float((instance >> 7u) & 127u) - 32.0, 
            float((instance >> 14u) & 127u) - 32.0);

    uint transform_idx = (instance >> 21) & 7u;
    mat3 rotation = mat3 (transforms [transform_idx]);
    vec3 translation = transforms [transform_idx][3].xyz;

    // blending scale
    float distance_to_camera = length (instance_translation + vec3 (0.5) - camera_xyz);
    float blend_range = (begin_blend_in_distance - end_blend_in_distance);
    float blend_scale = 1.0 - (clamp (distance_to_camera, end_blend_in_distance, begin_blend_in_distance) - end_blend_in_distance) / blend_range;
    blend_scale *= 0.5;

    // position
    vec3 vertex_position1 = vertex_position;
    vertex_position1.y *= blend_scale; 
    vec3 vertex_position2 = rotation * vertex_position1 + translation;
    vec3 vertex_position3 = (vertex_position2 / 16.0) + instance_translation;
    gl_Position = mvp_matrix * vec4 (vertex_position3, 1.0);
    gl_Position.w -= 0.00001;

    // diffuse lighting

    vec3 normal_post_transform = rotation * vertex_normal;
    float cos_theta = clamp (dot (vec4 (normal_post_transform.xyz, 0.0), light_direction), 0.0, 1.0);
    f_light_rgba = light_rgba * cos_theta;

    // uvs

    f_uv = vertex_uv;

    // shadow data

    f_shadow_xyz = vec4 (vertex_position3, 1.0);
    //f_shadow_xyz = mvp_matrix * vec4 (vertex_position3, 1.0);
    f_normal_model = normal_post_transform.xyz;    
}
